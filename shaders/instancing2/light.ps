#version 450 core

layout(binding=0) uniform sampler2D texture0;
layout(binding=1) uniform sampler2D texture1;
uniform vec3 light_pos, spot_dir;
uniform float radius, spot_exponent, spot_cos_cutoff;
uniform vec3 light_color;

const float far = -10000;
const float near = -1;
const float proj_a = far / (far - near);
const float proj_b = (-far * near) / (far - near);

in vec4 vs_pos;
in vec2 tex_coord;

out vec4 color;

void main()
{
	vec3 view_ray = vec3( vs_pos.xy / vs_pos.z, 1 );
	float depth = texture( texture0, tex_coord ).x;
	float linear_depth = proj_b / (depth - proj_a);
	vec3 pos = view_ray * linear_depth;

	vec3 n = texture( texture1, tex_coord ).xyz * 2 - 1;
	vec3 l = light_pos - pos;
	float d = length(l);
	l = normalize(l);
	float att = (1 + d / radius);
	att = 1.0 / ( att * att );
	float n_dot_l = dot(n, l);

	color = vec4(0, 0, 0, 1);

	if(n_dot_l > 0)
	{
		vec3 h = 0.5 * (l + normalize(-vs_pos.xyz));
		float n_dot_h = max(dot(n, h), 0);

		float spot_effect = dot(-l, spot_dir);
		if(spot_effect > spot_cos_cutoff)
		{
			spot_effect = pow( spot_effect, spot_exponent );
			att = spot_effect / (1.0 - att) * att + 1;
		}
		att -= 1;

		color += vec4(vec3((0.1 + n_dot_l + pow(n_dot_h, 20) / n_dot_l) * att), 1);
	}

  color.xyz = pow(color.xyz * light_color, vec3(1/2.2));
  //color = vec4(1,0,0,1);
  //color = vec4( depth );
  //color = vec4( pos, 1);
  //color = vec4( n, 1 );
}
